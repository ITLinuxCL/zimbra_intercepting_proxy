#!/usr/bin/env ruby

require 'bundler/setup'
require 'zimbra_intercepting_proxy'
require 'optparse'

# host, port
ARGV << '-h' if ARGV.empty?

options = {}

optparse = OptionParser.new do |opts|

  opts.banner = "Usage: zimbra_intercepting_proxy [options]"

  opts.on("-z", "--zimbra-admin-email=", "Email address for an admin account") do |o|
    options[:admin_user] = o
  end

  opts.on("-P", "--zimbra-admin-password=", "Password for the admin account") do |o|
    options[:admin_password] = o
  end

  opts.on("-a", "--address=", "The IP Address to bind to. Default 0.0.0.0") do |o|
    options[:bind_address] = o
  end

  opts.on("-p", "--bindport=", "The Port to bind to. Default 9090") do |o|
    options[:bind_port] = o
  end

  opts.on("-v", "--verbose", "Save logs information to /var/log/zimbra_intercepting_proxy.log") do |o|
    options[:debug] = true
  end

  opts.on("-d", "--domain=", "Default domain for the account") do |o|
    options[:domain] = o
  end

  opts.on("--default-mailbox-ip=", "Default Mailbox to present Login Page") do |o|
    options[:default_mailbox_ip] = o
  end

  opts.on("--mailboxes-mapping=", "Mapping of type 'IP_MBX:WEB_PORT:ZIMBRA_PATH;IP_MBX:WEB_PORT:ZIMBRA_PATH'") do |o|
    options[:mailboxes_mapping] = o
  end

  opts.on("--old-mailbox-mail-url-path=", "Old Platform Mailbox Web Port to present Login Page") do |o|
    options[:old_mailbox_mail_url_path] = o
  end

  mail_host_msg = "LDAP attribute that stores the mailbox for the account. Defaults to zimbraMailTransport"
  opts.on("--mail-host-attribute=", mail_host_msg) do |o|
    options[:mail_host_attribute] = o
  end

  dns_msg = "IPs, separated by ',', of nameservers to use"
  opts.on("--nameservers=", dns_msg) do |o|
    options[:name_servers] = o
  end

  opts.on("--url=", "SOAP Endpoint: http://x.x.x.x:7071/service/admin/soap") do |o|
    options[:soap_admin_url] = o
  end

  opts.on("-t=TOKEN", "--zimbra-authtoken=", "") do |o|
    options[:zimbra_admin_authtoken] = o
  end

  opts.on("-h", "--help", "Prints this help") do
   puts opts
   exit
  end

end

optparse.parse!

ZimbraInterceptingProxy.start options
